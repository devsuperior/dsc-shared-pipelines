name: SonarQube Pre Analysis on PR

on:
  workflow_call:
    inputs:
      project-key:
        required: true
        type: string
    secrets:
      github-token:
        required: true
      sonar-token:
        required: true
      sonar-host-url:
        required: true

env:
  PROJECT_KEY: ${{ inputs.project-key }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Gradle
        run: ./gradlew build

      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: build/

  test:
    needs: build
    name: Analyze with Sonar
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: build/

      - name: SonarQube Code Scan
        uses: sonarsource/sonarqube-scan-action@v1
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=${{ inputs.project-key }}
            -Dsonar.sources=src/main/
            -Dsonar.test=src/test/
            -Dsonar.java.binaries=build/classes/
            
        env:
          SONAR_TOKEN: ${{ secrets.sonar-token }}
          SONAR_HOST_URL: ${{ secrets.sonar-host-url }}

  comment:
    needs: test
    name: Check Quality Gate and Comment PR
    runs-on: ubuntu-latest
    steps:
      - name: Fetch and Post SonarQube metrics as PR comment
        uses: actions/github-script@v6
        with:
          script: |
            const SONAR_TOKEN = process.env.SONAR_TOKEN;
            const SONAR_URL = process.env.SONAR_HOST_URL;
            const PROJECT_KEY = process.env.PROJECT_KEY;
            const SONAR_PROJECT_URL = `${SONAR_URL}/dashboard?id=${PROJECT_KEY}`
            const METRICS = "bugs,vulnerabilities,code_smells,duplicated_lines_density,coverage,reliability_rating,security_rating,sqale_rating,security_review_rating";
            
            const response = await fetch(`${SONAR_URL}/api/measures/component?component=${PROJECT_KEY}&metricKeys=${METRICS}`, {
              headers: {
                'Authorization': `Basic ${Buffer.from(SONAR_TOKEN + ':').toString('base64')}`
              }
            });
            
            if (!response.ok) {
              const errorBody = await response.text();
              throw new Error(`Failed to fetch SonarQube metrics. Status: ${response.status}, Body: ${errorBody}`);
            }
            
            const data = await response.json();

            console.log(data);

            const measures = data.component.measures;

            const ratings = {
              '1': 'A 💚',
              '2': 'B 💙',
              '3': 'C 💛',
              '4': 'D 🧡',
              '5': 'E ❤️'
            };

            const reliabilityRating = ratings[measures.find(m => m.metric === 'reliability_rating').value];
            const securityRating = ratings[measures.find(m => m.metric === 'security_rating').value];
            const maintainabilityRating = ratings[measures.find(m => m.metric === 'sqale_rating').value];
            const securityReviewRating = ratings[measures.find(m => m.metric === 'security_review_rating').value];

            const commentBody = `
            🔍 SonarQube Analysis Results:
            - 🐞 Bugs: ${measures.find(m => m.metric === 'bugs').value}
            - ⚠️ Vulnerabilities: ${measures.find(m => m.metric === 'vulnerabilities').value} (Rating: ${securityRating})
            - 🌫️ Code Smells: ${measures.find(m => m.metric === 'code_smells').value} (Maintainability Rating: ${maintainabilityRating})
            - 🔄 Duplicated Lines (%): ${measures.find(m => m.metric === 'duplicated_lines_density').value}
            - 🛡️ Coverage: ${measures.find(m => m.metric === 'coverage').value}%
            - 📈 Reliability Rating: ${reliabilityRating}
            - 🔒 Security Review: ${securityReviewRating}

            🔗 [View in SonarQube](${SONAR_PROJECT_URL})
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.sonar-token }}
          SONAR_HOST_URL: ${{ secrets.sonar-host-url }}