name: SonarQube Analysis

on:
  workflow_call:
    inputs:
      repository-name:
        required: true
        type: string
      check-quality-gate:
        required: false
        type: boolean
        default: true
      execute-sonar-analysis:
        required: false
        type: boolean
        default: true
      quality-gate-name:
        required: false
        type: string
        default: "dscommerce-10"
    secrets:
      sonar-token:
        required: true
      sonar-host-url:
        required: true
env:
  PROJECT_KEY: ${{ github.ref_name }}-${{ inputs.repository-name }}

jobs:
  analyze:
    name: Analyze with Sonar
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: build/

      - name: Configure Quality Gate
        if: ${{ inputs.execute-sonar-analysis }}
        run: |
          # Verifica se o projeto já existe no SonarQube
          response=$(curl -v -u ${{ secrets.sonar-token }}: -X GET "${{ secrets.sonar-host-url }}/api/projects/search?projects=${{ env.PROJECT_KEY }}")
          project_exists=$(echo $response | grep -q '"total":1' && echo 'true' || echo 'false')

          # Se o projeto não existir, cria o projeto no SonarQube
          if [ "$project_exists" = "false" ]; then
            curl -v -u ${{ secrets.sonar-token }}: -X POST "${{ secrets.sonar-host-url }}/api/projects/create" \
            -d "project=${{ env.PROJECT_KEY }}"
          fi

          # Obtém o ID do Quality Gate com base no nome fornecido
          response=$(curl -v -u ${{ secrets.sonar-token }}: -X GET "${{ secrets.sonar-host-url }}/api/qualitygates/list")
          gate_id=$(echo $response | jq -r --arg GATE_NAME "${{ inputs.quality-gate-name }}" '.qualitygates[] | select(.name == $GATE_NAME) | .id')

          # Altera o Quality Gate do projeto
          if [ -n "$gate_id" ]; then
            curl -v -u ${{ secrets.sonar-token }}: -X POST "${{ secrets.sonar-host-url }}/api/qualitygates/select" \
            -d "gateId=$gate_id" \
            -d "name=${{ env.PROJECT_KEY }}" \
            -d "projectKey=${{ env.PROJECT_KEY }}"
          fi

      - name: SonarQube Code Scan
        if: ${{ inputs.execute-sonar-analysis }}
        uses: sonarsource/sonarqube-scan-action@v1
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=${{ env.PROJECT_KEY }}
            -Dsonar.sources=src/main/
            -Dsonar.test=src/test/
            -Dsonar.java.binaries=build/classes/            
        env:
          SONAR_TOKEN: ${{ secrets.sonar-token }}
          SONAR_HOST_URL: ${{ secrets.sonar-host-url }}

      - name: SonarQube Quality Gate check
        if: ${{ inputs.check-quality-gate }}
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@v1.1.0
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.sonar-token }}
          SONAR_HOST_URL: ${{ secrets.sonar-host-url }}

