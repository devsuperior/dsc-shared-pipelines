name: Check AppConfig Deployment

on:
  workflow_call:
    inputs:
      aws-region:
        required: true
        type: string
      repository-name:
        required: true
        type: string
      environment-name:
        required: true
        type: string
    secrets:
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true        
    outputs:
      requires-cloudformation:
        description: "Indica se o CloudFormation deve ser executado"
        value: ${{ jobs.appconfig-deploy.outputs.requires-cloudformation }}

jobs:
  appconfig-deploy:
    name: Check AppConfig Deployment
    runs-on: ubuntu-latest
    outputs:
      requires-cloudformation: ${{ steps.check-and-deploy.outputs.requires-cloudformation }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}

      - id: check-and-deploy
        name: Deployment Verification and Operations
        run: |
          echo "Verificando aplicacao pelo nome: ${{ inputs.repository-name }}"

          application_id=$(aws appconfig list-applications --query "Items[?Name=='${{ inputs.repository-name }}'].Id" --output text || echo "None")
          
          if [[ $application_id == "None" ]]; then
            echo "Aplicacao ${{ inputs.repository-name }} nao encontrada."
            application_exists="false"
            environment_exists="false"
          else
            echo "Aplicacao existe."
            application_exists="true"
            environment_id=$(aws appconfig list-environments --application-id "$application_id" --query "Items[?Name=='${{ inputs.environment-name }}'].Id" --output text || echo "None")

            if [[ $environment_id != "None" ]]; then
              echo "Ambiente existe."
              environment_exists="true"
            else
              echo "Ambiente nao existe."
              environment_exists="false"
            fi

            if [[ $environment_exists == "true" ]]; then
              for file in application*; do
                profile_name="${file}"
                echo "Verificando perfil: $profile_name para a aplicacao ${{ inputs.repository-name }}"
                
                profile_id=$(aws appconfig list-configuration-profiles --application-id "$application_id" --query "Items[?Name=='$profile_name'].Id" --output text || echo "None")
                if [[ $profile_id == "None" ]]; then
                  echo "Perfil $profile_name nao existe."
                  continue
                fi

                latest_version_id=$(aws appconfig get-configuration-profile --application-id "$application_id" --configuration-profile-id $profile_id --query 'LatestVersionNumber' --output text || echo "None")

                if [[ $latest_version_id == "None" ]]; then
                  echo "Nenhuma versao de configuracao encontrada para $profile_name."
                  continue
                fi

                aws appconfig get-hosted-configuration-version --application-id "$application_id" --configuration-profile-id $profile_id --version-number $latest_version_id --query 'Content' --output text > latest-content.yml || echo "None"

                if [[ -f "latest-content.yml" ]] && ! cmp -s "$file" "latest-content.yml"; then
                  echo "Diferencas encontradas, criando nova versao."
                  content=$(<"$file")
                  aws appconfig create-hosted-configuration-version --application-id "$application_id" --configuration-profile-id $profile_id --content "$content" --content-type "application/x-yaml"
                else
                  echo "Nenhuma diferenca encontrada, nao e necessario criar nova versao."
                fi

                rm -f latest-content.yml
              done
            fi
          fi
          
          requires_cloudformation="false"
          if [[ $application_exists == 'false' || $environment_exists == 'false' ]]; then
            requires_cloudformation="true"
          fi
          
          echo "requires-cloudformation=$requires_cloudformation" >> $GITHUB_OUTPUT

