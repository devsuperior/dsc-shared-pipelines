name: Generate complete template parameters

on:
  workflow_call:
    inputs:
      template-parameters-path:
        required: true
        type: string
      environment-name:
        required: true
        type: string
      repository-name:
        required: true
        type: string
    outputs:
      complete-template-parameters-base64:
        description: "Template parameters completo em base64"
        value: ${{ jobs.build-complete-template-parameters.outputs.output1 }}

permissions:
  contents: read

jobs:
  build-complete-template-parameters:
    name: Build complete template parameters
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.build.outputs.COMPLETE_TEMPLATE_PARAMETERS }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - id: build
        name: Run script to build complete template parameters
        run: |
          # Verifica se o arquivo já existe se não cria um novo
          if [ ! -f ${{ inputs.template-parameters-path }} ]; then
            echo "{}" > ${{ inputs.template-parameters-path }}
          fi

          # Remove a chave "Repository" e "EnvironmentName" se ela existir
          COMPLETE_JSON=$(jq 'del(.[] | select(.ParameterKey == "RepositoryName" or .ParameterKey == "EnvironmentName"))' ${{ inputs.template-parameters-path }})

          # Adiciona a chave "Repository" e "EnvironmentName" com os valores corretos
          COMPLETE_JSON=$(echo "$COMPLETE_JSON" | jq --arg repoValue "${{ inputs.repository-name }}" --arg envValue "${{ inputs.environment-name }}" '. += [{"ParameterKey": "RepositoryName", "ParameterValue": $repoValue}, {"ParameterKey": "EnvironmentName", "ParameterValue": $envValue}]')

          # Adiciona o conteudo dos arquivos de configuracao por ambiente
          COMPLETE_JSON=$(echo "$COMPLETE_JSON" | jq --arg contentDev "$(yq eval '.' application-dev.yml)" \
                                                     --arg contentStg "$(yq eval '.' application-stg.yml)" \
                                                     --arg contentPrd "$(yq eval '.' application-prd.yml)" \
                                                     '. += [{"ParameterKey": "ContentDev", "ParameterValue": $contentDev}, {"ParameterKey": "ContentStg", "ParameterValue": $contentStg}, {"ParameterKey": "ContentPrd", "ParameterValue": $contentPrd}]')

          # Codifica o JSON em Base64
          COMPLETE_JSON_BASE64=$(echo "$COMPLETE_JSON" | base64 -w 0)

          # Armazena o resultado em uma variavel de ambiente
          echo "COMPLETE_TEMPLATE_PARAMETERS=$COMPLETE_JSON_BASE64" >> $GITHUB_OUTPUT

          