name: Check AppConfig Deployment

on:
  workflow_call:
    inputs:
      aws-region:
        required: true
        type: string
      repository-name:
        required: true
        type: string
      environment-name:
        required: true
        type: string
      deployment-strategy:
        required: false
        type: string
        default: 'AppConfig.AllAtOnce'
    secrets:
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true        
    outputs:
      requires-cloudformation:
        description: "Indica se o CloudFormation deve ser executado"
        value: ${{ jobs.appconfig-deploy.outputs.requires-cloudformation }}

jobs:
  appconfig-deploy:
    name: Check AppConfig Deployment
    runs-on: ubuntu-latest
    outputs:
      requires-cloudformation: ${{ steps.check-and-deploy.outputs.requires-cloudformation }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}

      - id: check-and-deploy
        name: Deployment Verification and Operations
        run: |
          echo "Verificando aplicacao pelo nome: ${{ inputs.repository-name }}"

          application_id=$(aws appconfig list-applications --query "Items[?Name=='${{ inputs.repository-name }}'].Id" --output text || echo "None")
          
          echo "application_id=$application_id"

          application_exists="false"
          environment_exists="false"

          if [[ $application_id == "None" || $application_id == "" || $application_id == *"erro"* ]]; then
            echo "Aplicacao ${{ inputs.repository-name }} nao encontrada."
          else
            echo "Aplicacao existe."
            application_exists="true"

            for file in application*; do
              echo "---------------------------------------------------------------------------------------------------------------------"
              profile_name="${file}"
              echo "Verificando perfil: $profile_name para a aplicacao ${{ inputs.repository-name }}"
              
              env_name=$(echo $profile_name | sed 's/application-\(.*\).yml/\1/')
              echo "env_name=$env_name"

              environment_id=$(aws appconfig list-environments --application-id "$application_id" --query "Items[?Name=='$env_name'].Id" --output text || echo "None")

              echo "environment_id=$environment_id"              

              if [[ $environment_id == "None" || $environment_id == "" || $environment_id == *"erro"* ]]; then
                echo "Ambiente nao existe."
              else
                echo "Ambiente existe."
                environment_exists="true"              
              fi

              if [[ $environment_exists == "true" ]]; then

                profile_id=$(aws appconfig list-configuration-profiles --application-id "$application_id" --query "Items[?Name=='$profile_name'].Id" --output text || echo "None")

                echo "profile_id=$profile_id"

                if [[ $profile_id == "None" ]]; then
                  echo "Perfil $profile_name nao existe."
                  continue
                fi

                latest_version_id=$(aws appconfig list-hosted-configuration-versions --application-id "$application_id" --configuration-profile-id "$profile_id" --max-items 1 --query 'Items[0].VersionNumber' --output json || echo "None")

                echo "latest_version_id=$latest_version_id"

                if [[ $latest_version_id == "None" || $latest_version_id == "" || $latest_version_id == *"erro"* ]]; then
                  echo "Nenhuma versao de configuracao encontrada para $profile_name."
                  continue
                fi

                profile_description=$(aws appconfig get-hosted-configuration-version --application-id "$application_id" --configuration-profile-id "$profile_id" --version-number $latest_version_id --query 'Description' --output json latest-content.yml || echo "None")

                echo "profile_description=$profile_description"

                content_exported="false"
                if [[ $profile_description == "None" || $profile_description == "" || $profile_description == *"erro"* ]]; then
                  echo "Falha ao exportar latest-content.yml. Verifique."
                else                
                  echo "latest-content.yml criado."
                  cat latest-content.yml
                  content_exported="true"
                fi

                if [[ -f "latest-content.yml" ]] && [[ $content_exported == "true" ]]; then
                  if ! diff -q -Z -B -w "$file" "latest-content.yml" > /dev/null; then
                    echo "Os arquivos são diferentes."
                    echo "Diferencas encontradas, criando nova versao."
                    echo "-----------------------"
                    echo "-----------------------"
                    echo "-----------------------"
                    content=$(<"$file")
                    content_base64=$(echo "$content" | base64 -w 0)
                    result=$(aws appconfig create-hosted-configuration-version --application-id "$application_id" --configuration-profile-id "$profile_id" --content "$content_base64" --content-type "application/x-yaml" --description "$env_name Nova versao gerada no pipe $(date -u +%Y%m%d-%H_%M_%S)" --query 'VersionNumber' --output json generate-version-result.json || echo "None")
                    echo "result=$result"
                    cat generate-version-result.json
                    echo "-----------------------"
                    echo "-----------------------"
                    echo "-----------------------"

                    echo "Iniciando deploy. Variaveis que vao ser usadas: application_id=$application_id, environment_id=$environment_id, deployment-strategy=${{ inputs.deployment-strategy }}, profile_id=$profile_id, result=$result"
                    deploy_info=$(aws appconfig start-deployment \
                      --application-id "$application_id" \
                      --environment-id "$environment_id" \
                      --deployment-strategy-id "${{ inputs.deployment-strategy }}" \
                      --configuration-profile-id "$profile_id" \
                      --configuration-version "$result" \
                      --description "$env_name deploy gerado no pipe $(date -u +%Y%m%d-%H_%M_%S)" \
                      --debug \
                      --output json || echo "None")

                    echo "deploy_info=$deploy_info"                
                    echo "-----------------------"

                    if [[ $deploy_info == "None" || $deploy_info == "" || $deploy_info == *"erro"* ]]; then
                      echo "Falha ao tentar fazer o deploy."
                    else                
                      echo "Deploy iniciado."
                      deployment_number=$(echo "$deploy_info" | jq -r '.DeploymentNumber')
                      echo "Acompanhe o deploy em: https://${{ inputs.aws-region }}.console.aws.amazon.com/systems-manager/appconfig/applications/$application_id/environments/$environment_id/deployments/${deployment_number}/details?region=${{ inputs.aws-region }}"
                    fi                    
                  else
                      echo "Os arquivos são iguais."
                      echo "Nenhuma diferenca encontrada, nao e necessario criar nova versao."
                  fi                  
                fi

                rm -f latest-content.yml
                rm -f generate-version-result.json
              fi
            done

          fi
          
          requires_cloudformation="false"
          if [[ $application_exists == 'false' || $environment_exists == 'false' ]]; then
            requires_cloudformation="true"
          fi

          echo "application_exists=$application_exists"
          echo "environment_exists=$environment_exists"
          echo "requires_cloudformation=$requires_cloudformation"
          
          echo "requires-cloudformation=$requires_cloudformation" >> $GITHUB_OUTPUT

