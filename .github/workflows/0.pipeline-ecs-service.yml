name: Deploy ECS Service using AWS CloudFormation

on:
  workflow_call:
    inputs:
      aws-region:
        required: true
        type: string
      template-path:
        required: true
        type: string
      template-parameters-path:
        required: true
        type: string
      dockerfile-path:
        required: true
        type: string
      service-name:
        required: true
        type: string
      cluster-name:
        required: true
        type: string
      check-quality-gate:
        required: false
        type: boolean
        default: true
      execute-sonar-analysis:
        required: false
        type: boolean
        default: true
    secrets:
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      sonar-token:
        required: true
      sonar-host-url:
        required: true

permissions:
  contents: read

jobs:
  generate-basic-constants:
    uses: devsuperior/dsc-shared-pipelines/.github/workflows/generate-basic-constants.yml@main

  build-java-gradle:
    uses: devsuperior/dsc-shared-pipelines/.github/workflows/build-java-gradle.yml@main

  sonar-analysis:
    needs: [build-java-gradle, generate-basic-constants]    
    uses: devsuperior/dsc-shared-pipelines/.github/workflows/sonar-analysis.yml@main
    with:
      repository-name: ${{ needs.generate-basic-constants.outputs.repository-name }}
      check-quality-gate: ${{ inputs.check-quality-gate }}
      execute-sonar-analysis: ${{ inputs.execute-sonar-analysis }}
    secrets:
      sonar-token: ${{ secrets.sonar-token }}
      sonar-host-url: ${{ secrets.sonar-host-url }}

  build-push-docker-image:
    needs: [sonar-analysis, generate-basic-constants]
    uses: devsuperior/dsc-shared-pipelines/.github/workflows/build-push-docker-image.yml@main
    with:
      environment-name: ${{ needs.generate-basic-constants.outputs.environment-name }}
      repository-name: ${{ needs.generate-basic-constants.outputs.repository-name }}
      aws-region: ${{ inputs.aws-region }}
      dockerfile-path: ${{ inputs.dockerfile-path }}
    secrets:
      aws-access-key-id: ${{ secrets.aws-access-key-id }}
      aws-secret-access-key: ${{ secrets.aws-secret-access-key }}

  generate-complete-template-parameters:
    needs: generate-basic-constants
    uses: devsuperior/dsc-shared-pipelines/.github/workflows/generate-complete-template-parameters.yml@main
    with:
      template-parameters-path: ${{ inputs.template-parameters-path }}
      environment-name: ${{ needs.generate-basic-constants.outputs.environment-name }}
      repository-name: ${{ needs.generate-basic-constants.outputs.repository-name }}

  check-delete-cloud-formation-status:
    needs: [build-push-docker-image]
    uses: devsuperior/dsc-shared-pipelines/.github/workflows/check-delete-cloud-formation-status.yml@main
    with:
      aws-region: ${{ inputs.aws-region }}
      stack-name: ${{ jobs.generate-basic-constants.outputs.stack-name }}
    secrets:
      aws-access-key-id: ${{ secrets.aws-access-key-id }}
      aws-secret-access-key: ${{ secrets.aws-secret-access-key }}

  deploy-cloud-formation:
    needs: [check-delete-cloud-formation-status, generate-complete-template-parameters, generate-basic-constants]
    uses: devsuperior/dsc-shared-pipelines/.github/workflows/deploy-cloud-formation.yml@main
    with:
      aws-region: ${{ inputs.aws-region }}
      template-path: ${{ inputs.template-path }}
      template-parameters-path: ${{ inputs.template-parameters-path }}
      stack-name: ${{ needs.generate-basic-constants.outputs.stack-name }}
      complete-template-parameters-base64: ${{ needs.generate-complete-template-parameters.outputs.complete-template-parameters-base64 }}
    secrets:
      aws-access-key-id: ${{ secrets.aws-access-key-id }}
      aws-secret-access-key: ${{ secrets.aws-secret-access-key }}

  force-deploy-ecs-task-definition:
    needs: [deploy-cloud-formation, generate-basic-constants]
    uses: devsuperior/dsc-shared-pipelines/.github/workflows/force-deploy-ecs-task-definition.yml@main
    with:
      aws-region: ${{ inputs.aws-region }}
      service-name: ${{ needs.generate-basic-constants.outputs.environment-name }}-${{ inputs.service-name }}
      cluster-name: ${{ needs.generate-basic-constants.outputs.environment-name }}-${{ inputs.cluster-name }}
      stack-name: ${{ needs.generate-basic-constants.outputs.stack-name }}
      cloud-formation-result: ${{ needs.deploy-cloud-formation.outputs.cloud-formation-result }}
    secrets:
      aws-access-key-id: ${{ secrets.aws-access-key-id }}
      aws-secret-access-key: ${{ secrets.aws-secret-access-key }}      
